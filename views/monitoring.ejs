<!DOCTYPE html>
<html lang="fr">
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
        <meta name="mobile-web-app-capable" content="yes">

        <title>Parallaxe :: Monitoring</title>
        <meta name="theme-color" content="#ffffff">

        <link href="/css/bootswatch/bootstrap.min.css" rel="stylesheet">

        <script src="/js/jquery.min.js"></script>    
        <script src="/socket.io/socket.io.js"></script>

        <script href="/bootstrap/dist/js/bootstrap.min.js"></script>

        <link href="/bootstrap-toggle/css/bootstrap-toggle.min.css" rel="stylesheet">
        <script src="/bootstrap-toggle/js/bootstrap-toggle.min.js"></script>        

 <style>
    .AdminReseauBg, .BDDBg, .ComDigitaleBg, .CodeEtProgBg .HardwareBg{
        color:white;
    }

    .toolbar {
        /* margin-left:40%; */
        float:right;
    }

    .activityTitle {
        float:left;
    }

    .controlActivity, .controlActivity:hover {
        color:white;
    }

    .col-md-2 {
        flex: 0 0 20%;
        max-width: 20%;
    }

    /********* formulaire de mode de jeu ************/
    #gameModeCard div.alert {
        margin-top:10px;
    }

    .gameMode {
        float:right;
    }

    .btnClose {
        float: right;
        font-size:16pt;
        cursor: pointer;
        color: rgb(26, 26, 26);
    }

    #titleResult {
        width:100%;
        background-color: grey;
    }

    .colorBg {
        background-color: gray;
        margin-left: auto;
        margin-right: auto;
        margin-top: 2%;
        margin-bottom: 2%;
        text-align: center;
        vertical-align: center;
        width: 200px;
        min-height: 150px;
    }

    .card {
        transition: all 0.2s linear;
         margin-top: 10px;
     }

    /* glitter the stepTitle when changed */
    .changed {
        /*background-color: #fff;*/
        box-shadow:
            0 0 30px 10px #fff,
            0 0 40px 20px #f0f,
            0 0 70px 50px #0ff !important; /* Inner white + Middle Magena + Outer Cyan */
    }

    .smooth_changed {
        /*background-color: #aaa;*/
        box-shadow:
            0 0 30px 10px #fff,
            0 0 40px 20px #f0f,
            0 0 70px 50px #0ff !important; /* Inner white + Middle Magena + Outer Cyan */
    }

    .customSpinner {
        transition: 0.2s linear all;
        position: absolute;
        z-index: 98;
        top: 0;
        left: 0;
        bottom: 0;
        right: 0;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        background: rgba(0,0,0,0.8);
        text-align: center;
    }
    .customSpinner.hidden {
        opacity: 0;
        pointer-events: none;
    }
    #globalSpinner {
        position: fixed;
        z-index: 99;
    }

</style>
<body>
    <!-- Spinner for global page -->
    <div id="globalSpinner" class="customSpinner hidden">
        <div class="spinner-border" role="status">
            <span class="sr-only">Redémarrage du serveur</span>
        </div>
        <div>
            <br />
            <h4>Redémarrage du serveur en cours</h4>Cela peut prendre jusqu'à 60 secondes.
        </div>
    </div>
<!-- Begin page content -->
<main role="main" class="container-fluid">

    <div class="row">
        
        <div class="col-md-4">
            <div id="gameModeCard" class="card mb-4 border-light shadow-sm">
                <h5 class="card-header">
                    <span class="activityTitle">Contrôles généraux du jeu</span>
                </h5>
                <div class="card-body">
                    <p class="card-text">
                        <div class="btn-group btn-group-toggle" id="gameMode" data-toggle="buttons">
                            <label class="btn btn-warning active" for="gameModeChkEducatif">
                                <input type="radio" name="gameModeChk" id="gameModeChkEducatif" value="classroom" checked> Educatif
                            </label>
                            <label class="btn btn-warning" for="gameModeChkClassique">
                                <input type="radio" name="gameModeChk" id="gameModeChkClassique" value="classical"> Classique
                            </label>
                        </div>

                        <!-- <input id="gameModeChk" type="checkbox" class="" checked data-toggle="toggle" data-on="Educatif" data-off="Classique" data-onstyle="primary" data-offstyle="info"> -->
                        <br /><br />
                        <label class="badge badge-info">Educatif</label>
                        <br />
                        <em>Le container est paramétré pour une classe. Les sessions de jeu sont de 15 minutes.</em>
                        <br /><br />
                        <label class="badge badge-info">Classique</label>
                        <br />
                        <em>Le container est en mode escape game classique, il est éventuellement ouvert, et les sessions de jeu sont de 45 minutes.</em>
                        <br /><br />
                        <button id="btnInitAll" type="button" class="btn btn-warning">Initialisation pour un nouveau groupe</button>
                    </p>
                </div>
            </div>
        </div>

        <div class="col-md-8">
            <div class="card mb-8 border-light shadow-sm">
                <h5 class="card-header">
                    <svg style="float:right;" width="32px" height="32px" viewBox="0 0 16 16" class="bi bi-stopwatch" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" d="M6 .5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 0 1H9v1.07A7.001 7.001 0 0 1 8 16 7 7 0 0 1 7 2.07V1h-.5A.5.5 0 0 1 6 .5zM8 3a6 6 0 1 0 .001 12A6 6 0 0 0 8 3zm0 2.1a.5.5 0 0 1 .5.5V9a.5.5 0 0 1-.5.5H4.5a.5.5 0 0 1 0-1h3V5.6a.5.5 0 0 1 .5-.5z"/>
                    </svg>
                    <span class="activityTitle">Chronomètre</span>
                </h5>
                <div class="card-body">
                    <p class="card-text">
                        <iframe src="/timer" width="100%" height="250px"></iframe>

                        <a class="btn btn-primary controlTimerBtn" id="reset" href="#">Reinitialiser le décompte</a>
                      
                        <a class="btn btn-primary controlTimerBtn" id="stop" href="#">Mettre le décompte sur pause</a>

                        <a class="btn btn-primary controlTimerBtn" id="start" href="#">Lancer le décompte</a>
                    </p>

                </div>
            </div>
        </div>

    </div>

    <div class="row">
        <!-- Loop on each game  -->
<% data.global_config.servers.forEach(function(server) { %>
        <div class="col-md-2">
            <div id="<%= server.id %>" class="card mb-4 border-light shadow-sm" style="position: relative;">
                <!-- Spinner for the activity -->
                <div id="<%= server.id %>Spinner" class="customSpinner hidden">
                    <div class="spinner-border" role="status">
                        <span class="sr-only">Redémarrage de l'activité</span>
                    </div>
                    <div>
                        <br />
                        Redémarrage<br />de l'activité en cours
                    </div>
                </div>
                <h5 class="card-header">
                    <span class="activityTitle"><%= server.description %></span>
                </h5>
                <div class="card-body">
                    <strong><u>Etape en cours :</u></strong> <span class="stepTitle" id="stepTitle">Aucune étape en cours.<br />Passer le badger pour démarrer l'activité</span><span class="badge badge-default" id="totalsteps"></span>
                    <br /><br />
                    <a id="nextStep" href="#" class="btn btn-primary" title="Passer à l'étape suivante">Passer à l'étape suivante</a>
                    <br /><br />
                    <a id="restart" href="#" class="btn btn-primary"  title="Redémarrer l'activité">Réinitialiser l'activité</a>
                    <div class="d-flex flex-row-reverse">
                        <p id="" class="text-muted elapsedTime"></p>
                    </div>
                </div>
            </div>
        </div>
<% }) %>
    </div>

</main>

<footer class="footer mt-auto py-3">
  <!-- <div class="container">
    <span class="text-muted">Ici le footer</span>
  </div> -->
</footer>
<script>
     $(document).ready(function() {

        // Socket for timer control 
        var socket_timer = io('http://<%= data.global_config.app.adminServerIp %>:<%= data.global_config.app.adminServerPort %>/timercontrol');
        var gameMode = "classroom";

        // mise en surbrillance d'un élément
        function highlight(elt, cls) {
            cls = (!cls) ? "changed": cls;
            elt.addClass(cls);
            setTimeout(function() {
                elt.removeClass(cls);
            }, 200);
        }
        
        // Listener sur les boutons de mode de jeu
        $(".modeButton").on('click', function() {
            var mode = this.id;
            setGameMode(mode);
        });

        // Listener sur les controles du timer
        $(".controlTimerBtn").on('click', function(e) {
            highlight($(this), "smooth_changed");
            var action = this.id;
            console.log('action = '+action);
            socket_timer.emit('toserver.timerControl',  { action: action, gameMode: gameMode } );
        });

        // Listener sur le boutons gameMode
        $('#gameMode label').on('click', function(e) {
            e.preventDefault();
            $('#gameMode label').removeClass('active');
            $(this).addClass('active');
            $('#gameMode label input').removeAttr('checked');
            $(this).find('input').attr("checked", "checked");
            gameMode = $(this).find('input').val();
            console.log('gameMode = '+ gameMode);
            socket_timer.emit('toserver.timerControl',  { action: "set", gameMode: gameMode } );
        });

        // Listen to game server directive (setter on connection)
        socket_timer.on('toclient.gameMode', function(data){
            gameMode = data.gameMode;
            var chkbx_state = (gameMode == "classroom") ? true : false;
            $('#gameModeChk').prop('checked', chkbx_state).change()
        });

        // loop on each game
        // [ ->

<% data.global_config.servers.forEach(function(server) { %>

        // ------------------------------------------------------------------
        // Socket listening for <%= server.id %>
        // ------------------------------------------------------------------
        var socket_<%= server.id %> = io('http://<%= server.ip %>:<%= server.port %>/monitoring');
        var nextStep_<%= server.id %> = "";

        // Receiving new rfid badge
        socket_<%= server.id %>.on('toclient.newGameSession_<%= server.id %>', function(data) {
            $('#<%= server.id %>Spiner').addClass('hidden');
            
        });

        // Receiving Current Step of game
        socket_<%= server.id %>.on('toclient.newGameStep_<%= server.id %>', function(data) {
            $("#<%= server.id %> .stepTitle").html(data.stepTitle);
            highlight($("#<%= server.id %>"));
            var etapesMsg = (data.totalSteps == 0) ? "En attente de scan RFID..." : data.totalSteps + " étapes au total.";
            $("#<%= server.id %> .totalsteps").html(etapesMsg);
            highlight($("#<%= server.id %>"));
        });

        // receiving solutions for current step
        socket_<%= server.id %>.on('toclient.solutionsForStep_<%= server.id %>', function(data) {
            var soluce = (data.solutions) ? data.solutions[0].responses : "";
            nextStep_<%= server.id %> = data.nextStep;
            if (!soluce || soluce.length == 0) soluce = "Pas de solution pour cette étape.";
            else soluce = JSON.stringify(soluce, null, 4);
            $("#<%= server.id %> .solutions").html(soluce);
        });

        // Lights control and color data
        socket_<%= server.id %>.on('toclient.colorsSets_<%= server.id %>', function(data) {
            data.colorsSet.forEach(function(c){
                var RGBcolors = "rgb("+c.rgb[0]+", "+c.rgb[1]+", "+c.rgb[2]+");";
                $("#"+c.scenarioId + " .card-header").attr("style", "background-color: "+RGBcolors+";" );
            });
        });

        //
        // Activity controls  : Restart
        //
        $("#<%= server.id %> #restart").on('click', function(e) {

            $('#<%= server.id %>Spinner').removeClass('hidden');
            highlight($(this).parent().parent(), "smooth_changed");
            $.get( "http://<%= server.ip %>:<%= server.port %>/api/restart", function(data) {});
            e.preventDefault();
        });

        //
        // nextStep
        //
        $("#<%= server.id %> #nextStep").on('click', function(e) {
            highlight($(this).parent().parent(), "smooth_changed");
            $.get( "http://<%= server.ip %>:<%= server.port %>/api/nextStep", function(data) {});
            e.preventDefault();
        });

        //
        // Refresh 
        //
        // $("#<%= server.id %> #refresh").on('click', function(e) {
        //     highlight($(this), "smooth_changed");
        //     $.get( "http://<%= server.ip %>:<%= server.port %>/api/refresh", function(data) {});
        //     e.preventDefault();
        // });

<% }) %>
        // <- ]
        // end loop

        // Listener on init all button
        $('#btnInitAll').on('click', function(e) {
            e.preventDefault();
            // Add loader to avoid unwanted actions
            $('#globalSpinner').removeClass('hidden');

            // Emitting order to kill node server and browsers
            <% data.global_config.servers.forEach(function(server) { %>
                socket_<%= server.id %>.emit('toserver.reInitServer', {gameMode: gameMode});
            <% }) %>

            // Refresh monitoring page
            setTimeout(function() {
                $('#globalSpinner').addClass('hidden');
            }, 60000);
        });

}); 
</script>
<!-- <%- JSON.stringify(data, null, 1) %>-->
</body>
</html>