<%- include('header', { data: data }) %>
<link rel="stylesheet" href="/css/xterm/xterm.css" />
<script src="/js/xterm/xterm.js"></script>
      <div id="terminal"></div>
<script>
    // Data and vars
    const prompt_linux = '\r\n\033[95m/root\033[0m@\033[32mGreenternet-console\033[0m $\033[0m ';
    const prompt_linux_length = 28;
    const serveursAllies = JSON.parse('<%- JSON.stringify(data.solutions[0].responses) %>');
    const serverList = JSON.parse('<%- JSON.stringify(data.currentStep.serverData) %>');
    const typing_pause = 1000; 

    const IPList = Array();
        serverList.forEach(s => { IPList.push(s.ip) });
    console.log(IPList);

    const banner = Array("\033[93m ",
    "  _____                 __                   __      __                         __", 
    " / ___/______ ___ ___  / /____ _______  ___ / /_   _/_/ _______  ___  ___ ___  / /__ ",
    "/ (_ / __/ -_) -_) _ \\/ __/ -_) __/ _ \\/ -_) __/ _/_/  / __/ _ \\/ _ \\(_-</ _ \\/ / -_)",
    "\\___/_/  \\__/\\__/_//_/\\__/\\__/_/ /_//_/\\__/\\__/ /_/    \\__/\\___/_//_/___/\\___/_/\\__/ ",
    " \033[0m");
              
    var maxCommandNumber = 50; // maximum de commandes que les élèves peuvent taper dans la console
    var term = new Terminal({cols:120, bellStyle: "sound"});
    term.open(document.getElementById('terminal'));

    // --------------------------
    // Build the fake terminal
    // --------------------------
    function runFakeTerminal() {
        if (term._initialized) {
        return;
        }

        term._initialized = true;

        term.prompt = () => {
        term.write('\r\n$ ');
        };

        cmd_line = "";

        banner.forEach(line => {
            write_line(line);
        });

        prompt(term);

        term.onData(e => {
            const printable = !e.altKey && !e.altGraphKey && !e.ctrlKey && !e.metaKey;
            switch (e) {
                case '\r': // Enter
                case '\u0003': // Ctrl+C
                    if (maxCommandNumber > 0) exec_command(cmd_line);
                    else displayErrorNoMoreCMd();
                    cmd_line = "";
                    prompt(term);
                    break;
                case '\u007F': // Backspace (DEL)
                    // Do not delete the prompt
                    if (term._core.buffer.x > prompt_linux_length) {
                        term.write('\b \b');
                        cmd_line = cmd_line.substring(0, cmd_line.length - 1);
                    } else {
                        
                    }
                    break;
                default: // Print all other characters for demo
                if (printable) {
                    term.write(e);
                    cmd_line += e;
                }
            }
        });
    }

    // --------------------------
    // Write the prompt
    // --------------------------
    function prompt(term) {
        term.write(prompt_linux);
    }

    // --------------------------
    // Function to execcute command
    //
    //  We need to fake some command 
    //   - "status 192.168.10.10"
    //   - "ping 192.168.10.10"
    //   - "help" which give explanation on both of previous commands
    // --------------------------
    function exec_command(line){
        maxCommandNumber--;
        cmd = line.toLowerCase().trim();
        // 1. Parse command
        var ping = (cmd.substring(0,4) == "ping") ? true : false;
        var status = (cmd.substring(0,6) == "status") ? true : false;
        var help  = (cmd.substring(0,4) == "help") ? true : false;
        var arg1 = cmd.split(" ")[1]; // this should be IP of server

        var hacker_rm = (cmd.substring(0,3) == "rm " || cmd.substring(0,5) == "rmdir") ? true : false;

        // 2. switch on what we should do
        if (help) display_help();
        if (ping) display_ping(arg1);
        if (status) display_status(arg1);
        
        if (hacker_rm) display_hacker_rm(cmd);

        if (!status && ! ping && ! help && !hacker_rm) display_error(cmd);
    };

    // --------------------------
    // Write a line 
    // --------------------------
    function write_line(line) {
        term.write("");
        for( i=0; i < line.length; i++ ){
            term.write(line[i]);
        }
        term.writeln("");
    }    

    // --------------------------------------------
    // Command Help : Displaying result of help
    // --------------------------------------------
    function display_help() {
        write_line("");
        write_line("-----------------------------------------------------------");
        write_line("Here is a little help for guys...");
        write_line("-----------------------------------------------------------");
        write_line("Command '\x1B[1;3;31mstatus\x1B[0m' : see if server is infected or not.");
        write_line("usage : '\x1B[1;3;31mstatus [IP address]\x1B[0m'");
        write_line("");
        write_line("Command '\x1B[1;3;31mping\x1B[0m' : see if the server is reachable.");
        write_line("usage : '\x1B[1;3;31mping [IP Address]\x1B[0m'");
        commandRemaining();
    }

    // -------------------------------------------------
    // Command Status : Dealing with 'Status' Command
    // -------------------------------------------------
    function display_status(ip) {
        var isInfected = true;
        var indexIP = IPList.indexOf(ip) + 1;
        console.log(indexIP);
        // 10 servers 
        var serveursOK = serveursAllies[0].chemin1.concat(serveursAllies[1].chemin2);
        serveursOK.sort();
        console.log(serveursOK);
        // Verify that the array index of the typed ip is in the allies serves list
        if ( serveursOK.includes(indexIP) ) isInfected = false;

        // Displaying a result
        write_line("");
        if (ip === undefined) {
            write_line("\x1B[1;3;31mError !\x1B[0m");
            write_line("usage : '\x1B[1;3;31mstatus [IP address]\x1B[0m'");
        } else {
            if (isInfected) {
                write_line("[***********************-------] : Scan OK.");
                write_line("[###########################   ] : Scan OK.");
                num = (Math.floor(Math.random() * 1840033));
                write_line( num + " / 1840033 files inected.");
                write_line("\x1B[1;3;31mServer infected !\x1B[0m");
                write_line("IP : "+ ip);
            } else {
                write_line("[***********************-------] : Scan OK.");
                write_line("[###########################   ] : Scan OK.");
                write_line( "0 / 1840033 files inected.");
                write_line("\x1B[1;3;32mServer clean !\x1B[0m");
                write_line("IP : "+ ip);
            }
        }
        commandRemaining();
    }

    // -------------------------------------------------
    // Command Ping : Dealing with 'Ping' Command
    // -------------------------------------------------
    function display_ping(ip) {

    }

    // -------------------------------------------------
    // Command Rm / Rmdir : Dealing with 'Rm / Rmdir'
    // -------------------------------------------------
    function display_hacker_rm(cmd) {
        write_line("");
        write_line("La commande '\x1B[1;3;31m" + cmd + "\x1B[0m' est biensûr reconnue, petit(e) rigolo(te) ! Je l'ai bien évidemment bloquée ! ");
        write_line("Il faudra trouver autre chose de plus malin pour me pirater...");  
        maxCommandNumber -= 5;
        write_line("Puisque tu veux jouer, je te retire 5 commandes !");  
        commandRemaining();
    }

    function display_error(cmd) {
        write_line("");
        write_line("La commande '\x1B[1;3;31m" + cmd + "\x1B[0m' n'est pas reconnue ! "); 
        commandRemaining()      
    }

    function commandRemaining() {
        write_line("/!\\ Plus que " + maxCommandNumber + " commande" + ((maxCommandNumber > 1)? "s" : "") + "...");
    }

    function displayErrorNoMoreCMd() {
        write_line("");
        write_line("La console verrouillée. Impossible de prendre votre commande.");
        // write_line("try 'sudo unlock term' ");

    }

    // Let's run the terminal
    runFakeTerminal();
</script>
<%- include('footer', { data: data })%>
